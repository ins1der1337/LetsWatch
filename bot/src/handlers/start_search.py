from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from model.model_search import search_by_name, search_by_actor, recommend_by_title

router = Router()

class SearchState(StatesGroup):
    waiting_for_title = State()
    waiting_for_actor = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.")


# === –ö–æ–º–∞–Ω–¥–∞ /search ===
@router.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –ü–æ –∞–∫—Ç—ë—Ä—É", callback_data="actor")],
        [types.InlineKeyboardButton(text="üé• –ü–æ —Ñ–∏–ª—å–º—É", callback_data="movie")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)


# === Callback –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ ===
@router.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "movie":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
        await state.set_state(SearchState.waiting_for_title)
    elif callback.data == "actor":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:")
        await state.set_state(SearchState.waiting_for_actor)
    await callback.answer()


# === –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞ ===
@router.message(SearchState.waiting_for_title)
async def handle_movie_search(message: types.Message, state: FSMContext):
    title = message.text.strip()
    results = search_by_name(title)

    if results.empty:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for _, row in results.iterrows():
            text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
                   f"–ñ–∞–Ω—Ä—ã: {row['genres']}\n" \
                   f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
            await message.answer(text)

            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = recommend_by_title(row['title'])
            if not recommendations is None:
                await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
                for _, rec in recommendations.iterrows():
                    await message.answer(f"üëâ {rec['title']} ‚Äî {rec['genres']}")

    await state.clear()


# === –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç—ë—Ä—É ===
@router.message(SearchState.waiting_for_actor)
async def handle_actor_search(message: types.Message, state: FSMContext):
    actor = message.text.strip()
    results = search_by_actor(actor)

    if results.empty:
        await message.answer("–§–∏–ª—å–º—ã —Å —ç—Ç–∏–º –∞–∫—Ç—ë—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for _, row in results.iterrows():
            text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
                   f"–ê–∫—Ç—ë—Ä—ã: {row['actors']}\n" \
                   f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
            await message.answer(text)

    await state.clear()