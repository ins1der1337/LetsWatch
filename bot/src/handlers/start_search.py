from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.lexicon import LEXICON
from aiogram.types import FSInputFile
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from http_client import api_client

from keyboards.inline import (
    get_main_menu_keyboard,
    get_search_type_keyboard,
    get_pagination_keyboard,
    menu,
)

from http_client import api_client

router = Router()

MOVIES_PER_PAGE = 5


class SearchState(StatesGroup):
    waiting_for_title = State()
    waiting_for_actor = State()
    waiting_for_genre = State()
    waiting_for_director = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = get_search_type_keyboard()
    photo = FSInputFile("src\images\welcome.png")
    await message.answer_photo(
        photo=photo,
        caption=LEXICON["start"].format(username=message.from_user.first_name),
        reply_markup=keyboard,
        parse_mode="HTML",
    )


RATE_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üòç"),
            KeyboardButton(text="üòè"),
            KeyboardButton(text="üòê"),
            KeyboardButton(text="üòí"),
            KeyboardButton(text="ü§Æü§¢üí©"),
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å —á–∏—Å–ª–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π
RATING_MAP = {"üòç": 5, "üòè": 4, "üòê": 3, "üòí": 2, "ü§Æü§¢üí©": 1}


@router.callback_query(F.data.startswith("rate_"))
async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
    movie_id = int(callback.data.split("_")[1])
    print(movie_id)
    await state.update_data(movie_id=movie_id)

    await callback.message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=RATE_KEYBOARD  # —Ç—É—Ç —Ç–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    )
    await callback.answer()


@router.message(lambda msg: msg.text in RATING_MAP.keys())
async def handle_rating(message: types.Message, state: FSMContext):
    rating = RATING_MAP[message.text]
    data = await state.get_data()
    movie_id = data.get("movie_id")
    tg_id = message.from_user.id

    if not movie_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–ª—å–º.")
        return

    try:
        result = await api_client.send_rating(
            tg_id=tg_id, movie_id=movie_id, rating=rating
        )
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", reply_markup=menu())
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:", result)
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏:", e)

    await state.clear()


@router.message(Command("history"))
async def cmd_history(message: types.Message):
    tg_id = message.from_user.id

    try:
        response = await api_client.get_user_reviews(tg_id=tg_id)

        if not response or not isinstance(response, dict):
            await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å–º.")
            return

        reviews = response.get("reviews", [])
        if not reviews:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å–º.")
            return

        text = "üé¨ <b>–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:</b>\n\n"
        for review in reviews:
            if not isinstance(review, dict):
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏:", review)
                continue

            rating = review.get("rating", 0)
            movie_id = review.get("movie_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID")

            text += f"üé• –§–∏–ª—å–º ID: {movie_id}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:", e)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/rate ‚Äî –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º\n"
        "/history ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )
    await message.answer(help_text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ –∏ –∫–æ–ª–ª–±–µ–∫ \search
async def show_search_keyboard(target, state: FSMContext):
    keyboard = get_main_menu_keyboard()

    if isinstance(target, types.Message):
        await target.answer(LEXICON["search"], reply_markup=keyboard, parse_mode="HTML")
    elif isinstance(target, types.CallbackQuery):
        await target.message.answer(
            LEXICON["search"], reply_markup=keyboard, parse_mode="HTML"
        )
        await target.answer()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ callback "search"
@router.callback_query(lambda c: c.data == "search")
async def cmd_search_callback(callback: types.CallbackQuery, state: FSMContext):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/rate ‚Äî –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º\n"
        "/history ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )
    await callback.message.answer(help_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search
@router.message(Command(commands=["search"]))
async def cmd_search_command(message: types.Message, state: FSMContext):
    await show_search_keyboard(message, state)


# === Callback –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ ===
@router.callback_query(lambda c: c.data in ["title", "actor", "genre", "director"])
async def handle_search_type(callback: types.CallbackQuery, state: FSMContext):
    mapping = {
        "title": ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", SearchState.waiting_for_title),
        "actor": ("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:", SearchState.waiting_for_actor),
        "genre": ("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä:", SearchState.waiting_for_genre),
        "director": ("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞:", SearchState.waiting_for_director),
    }

    text, target_state = mapping[callback.data]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    await state.update_data(search_type=callback.data)
    await state.set_state(target_state)

    # await api_client.search_movie()
    print(target_state)
    await callback.message.answer(text)
    await callback.answer()


@router.message(
    StateFilter(
        SearchState.waiting_for_title,
        SearchState.waiting_for_actor,
        SearchState.waiting_for_genre,
        SearchState.waiting_for_director,
    )
)
async def process_search_input(message: types.Message, state: FSMContext):
    user_input = message.text
    data = await state.get_data()
    search_type = data.get("search_type")  # 'title', 'actor', 'genre', 'director'
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ search_movie
    params = {}

    params[search_type] = user_input
    print(params)

    # –í—ã–∑–æ–≤ search-—Ñ—É–Ω–∫—Ü–∏–∏
    try:
        result = await api_client.search_movie(**params)
        print(result)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        raise

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if not result:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(search_result=result)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    page = result["pagination"]["page"]
    limit = result["pagination"]["limit"]
    total_movies = result["totalMovies"]
    # total_pages = (total_movies + limit - 1) // limit

    movie = result["movies"][0]  # –ü–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    print(movie)

    description = ""
    if movie.get("description"):
        description = movie["description"]
    if len(description) > 500:
        description = description[:497] + "..."

    year = movie["year"] if movie["year"] else ""

    print(page)
    caption = LEXICON["movie_card"].format(
        title=movie["title"],
        year=year,
        stars=round(movie["rating"]) // 2 * "‚≠êÔ∏è",
        rating=round(movie["rating"], 2),
        director=movie["director"],
        actors=", ".join(movie["actors"]),
        genres=", ".join(movie["genres"]),
        description=description,
    )
    keyboard = get_pagination_keyboard(page, limit, movie_id=movie["movieId"])

    await message.answer_photo(
        photo=movie["poster_url"],
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    # await state.clear()


# ++++++++++++++++++++++++++++
@router.callback_query(F.data.startswith("page_"))
async def page_callback(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])
    print(page)
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∏–∑ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    result = data.get("search_result")

    if not result:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    movies = result["movies"]
    total_movies = result["totalMovies"]
    page_size = result["pagination"]["limit"]

    movie = movies[page - 1]

    keyboard = get_pagination_keyboard(
        page, total_pages=page_size, movie_id=movie["movieId"]
    )

    description = ""
    if movie.get("description"):
        description = movie["description"]
    if len(description) > 500:
        description = description[:497] + "..."

    year = movie["year"] if movie["year"] else ""

    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=movie["poster_url"],
            caption=LEXICON["movie_card"].format(
                title=movie["title"],
                year=year,
                stars=round(movie["rating"]) // 2 * "‚≠êÔ∏è",
                rating=round(movie["rating"], 2),
                director=movie["director"],
                actors=", ".join(movie["actors"]),
                genres=", ".join(movie["genres"]),
                description=description,
            ),
            parse_mode="HTML",
        ),
        reply_markup=keyboard,
    )
    await callback.answer()


# +++++++++++++++++++++++++++

# === –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞ ===
"""@router.message(SearchState.waiting_for_title)
async def handle_movie_search(message: types.Message, state: FSMContext):
    title = message.text.strip()
    results = search_by_name(title)

#     if results.empty:
#         await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     else:
#         for _, row in results.iterrows():
#             text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
#                    f"–ñ–∞–Ω—Ä—ã: {row['genres']}\n" \
#                    f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
#             await message.answer(text)

#             # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#             recommendations = recommend_by_title(row['title'])
#             if not recommendations is None:
#                 await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
#                 for _, rec in recommendations.iterrows():
#                     await message.answer(f"üëâ {rec['title']} ‚Äî {rec['genres']}")

#     await state.clear()


# # === –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç—ë—Ä—É ===
# @router.message(SearchState.waiting_for_actor)
# async def handle_actor_search(message: types.Message, state: FSMContext):
#     actor = message.text.strip()
#     # results = search_by_actor(actor)

#     if results.empty:
#         await message.answer("–§–∏–ª—å–º—ã —Å —ç—Ç–∏–º –∞–∫—Ç—ë—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     else:
#         for _, row in results.iterrows():
#             text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
#                    f"–ê–∫—Ç—ë—Ä—ã: {row['actors']}\n" \
#                    f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
#             await message.answer(text)

    await state.clear()"""
