from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from http_client import api_client


router = Router()

class SearchState(StatesGroup):
    waiting_for_title = State()
    waiting_for_actor = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–æ—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="rating")],
    ])
    res = await api_client.register_user(message.from_user.id, message.from_user.username)
    
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n –æ—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º.\n {res}", reply_markup=keyboard)

RATE_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üòç"),
            KeyboardButton(text="üòè"),
            KeyboardButton(text="üòê"),
            KeyboardButton(text="üòí"),
            KeyboardButton(text="ü§Æü§¢üí©")
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å —á–∏—Å–ª–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π
RATING_MAP = {
    "üòç": 5,
    "üòè": 4,
    "üòê": 3,
    "üòí": 2,
    "ü§Æü§¢üí©": 1
}


@router.message(Command("rate"))
async def cmd_rate(message: types.Message, state: FSMContext):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ movie_id –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–ª—å–º–∞
    movie_id = 589  # ‚Üê –∑–∞–º–µ–Ω–∏ —ç—Ç–æ –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–∏

    await state.update_data(movie_id=movie_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º:", reply_markup=RATE_KEYBOARD)


@router.message(lambda msg: msg.text in RATING_MAP.keys())
async def handle_rating(message: types.Message, state: FSMContext):
    rating = RATING_MAP[message.text]
    data = await state.get_data()
    movie_id = data.get("movie_id")
    tg_id = message.from_user.id

    if not movie_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–ª—å–º.")
        return

    try:
        result = await api_client.send_rating(tg_id=tg_id, movie_id=movie_id, rating=rating)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:", result)
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏:", e)

    await state.clear()
    
@router.message(Command("history"))
async def cmd_history(message: types.Message):
    tg_id = message.from_user.id

    try:
        response = await api_client.get_user_reviews(tg_id=tg_id)

        if not response or not isinstance(response, dict):
            await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å–º.")
            return

        reviews = response.get("reviews", [])
        if not reviews:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∏–ª—å–º.")
            return

        text = "üé¨ <b>–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:</b>\n\n"
        for review in reviews:
            if not isinstance(review, dict):
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏:", review)
                continue

            rating = review.get("rating", 0)
            movie_id = review.get("movie_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID")

            text += f"üé• –§–∏–ª—å–º ID: {movie_id}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:", e)
        
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/rate ‚Äî –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º\n"
        "/history ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )
    await message.answer(help_text, parse_mode="HTML")

# === –ö–æ–º–∞–Ω–¥–∞ /search ===
@router.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard = [
            [KeyboardButton(text="üîç –ü–æ –∞–∫—Ç—ë—Ä—É", callback_data="actor")],
            [KeyboardButton(text="üé• –ü–æ —Ñ–∏–ª—å–º—É", callback_data="movie")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)


# === Callback –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ ===
@router.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "movie":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
        await state.set_state(SearchState.waiting_for_title)
    elif callback.data == "actor":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:")
        await state.set_state(SearchState.waiting_for_actor)
    await callback.answer()


# # === –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞ ===
# @router.message(SearchState.waiting_for_title)
# async def handle_movie_search(message: types.Message, state: FSMContext):
#     title = message.text.strip()
#     results = search_by_name(title)

#     if results.empty:
#         await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     else:
#         for _, row in results.iterrows():
#             text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
#                    f"–ñ–∞–Ω—Ä—ã: {row['genres']}\n" \
#                    f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
#             await message.answer(text)

#             # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#             recommendations = recommend_by_title(row['title'])
#             if not recommendations is None:
#                 await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
#                 for _, rec in recommendations.iterrows():
#                     await message.answer(f"üëâ {rec['title']} ‚Äî {rec['genres']}")

#     await state.clear()


# # === –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç—ë—Ä—É ===
# @router.message(SearchState.waiting_for_actor)
# async def handle_actor_search(message: types.Message, state: FSMContext):
#     actor = message.text.strip()
#     # results = search_by_actor(actor)

#     if results.empty:
#         await message.answer("–§–∏–ª—å–º—ã —Å —ç—Ç–∏–º –∞–∫—Ç—ë—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     else:
#         for _, row in results.iterrows():
#             text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
#                    f"–ê–∫—Ç—ë—Ä—ã: {row['actors']}\n" \
#                    f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
#             await message.answer(text)

#     await state.clear()