from aiogram import Router, types
from aiogram.filters import CommandStart, Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.lexicon import LEXICON
from aiogram.types import FSInputFile
from aiogram.filters import StateFilter

from keyboards.inline import get_main_menu_keyboard, get_search_type_keyboard, get_pagination_keyboard

from http_client import api_client

router = Router()

MOVIES_PER_PAGE = 5


class SearchState(StatesGroup):
    waiting_for_title = State()
    waiting_for_actor = State()
    waiting_for_genre = State()
    waiting_for_director = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    keyboard = get_search_type_keyboard()
    photo = FSInputFile('src\images\welcome.png')
    await message.answer_photo(photo=photo, caption=LEXICON['start'].format(username=message.from_user.first_name), \
                               reply_markup=keyboard, parse_mode='HTML')
    

# –ö–æ–º–∞–Ω–¥–∞ –∏ –∫–æ–ª–ª–±–µ–∫ \search
async def show_search_keyboard(target, state: FSMContext):
    keyboard = get_main_menu_keyboard()

    if isinstance(target, types.Message):
        await target.answer(LEXICON['search'], reply_markup=keyboard, parse_mode='HTML')
    elif isinstance(target, types.CallbackQuery):
        await target.message.answer(LEXICON['search'], reply_markup=keyboard, parse_mode='HTML')
        await target.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ callback "search"
@router.callback_query(lambda c: c.data == "search")
async def cmd_search_callback(callback: types.CallbackQuery, state: FSMContext):
    await show_search_keyboard(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /search
@router.message(Command(commands=["search"]))
async def cmd_search_command(message: types.Message, state: FSMContext):
    await show_search_keyboard(message, state)


# === Callback –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ ===
@router.callback_query(lambda c: c.data in ["movie", "actor", "genre", "director"])
async def handle_search_type(callback: types.CallbackQuery, state: FSMContext):
    mapping = {
        "movie": ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", SearchState.waiting_for_title),
        "actor": ("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:", SearchState.waiting_for_actor),
        "genre": ("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä:", SearchState.waiting_for_genre),
        "director": ("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞:", SearchState.waiting_for_director),
    }

    text, target_state = mapping[callback.data]
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    await state.update_data(search_type=callback.data)
    await state.set_state(target_state)

    # await api_client.search_movie()
    print(target_state)
    await callback.message.answer(text)
    await callback.answer()


@router.message(StateFilter(
    SearchState.waiting_for_title,
    SearchState.waiting_for_actor,
    SearchState.waiting_for_genre,
    SearchState.waiting_for_director
))
async def process_search_input(message: types.Message, state: FSMContext):
    user_input = message.text
    data = await state.get_data()
    search_type = data.get("search_type")  # 'title', 'actor', 'genre', 'director'
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ search_movie
    params = {}

    params[search_type] = user_input
    print(params)

    # –í—ã–∑–æ–≤ search-—Ñ—É–Ω–∫—Ü–∏–∏
    try:
        result = await api_client.search_movie(**params)
        print(result)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        raise

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if not result:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer(str(result))  # —Å—Å—ã–ª—å –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é 
        # for movie in result:
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∏–ª—å–º—É
        #     print("–º—è—É")
        #     title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        #     year = movie.get("year", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        #     await message.answer(f"<b>{title}</b> ({year})", parse_mode='HTML')

    await state.clear()


# ++++++++++++++++++++++++++++
def format_movie(movie: dict) -> str:
    return LEXICON['movie_card']


@router.callback_query(F.data.startswith("page_"))
async def page_callback(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∏–∑ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    result = data.get("search_result")

    if not result:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    movies = result["movies"]
    total_movies = result["totalMovies"]
    page_size = result["pagination"]["limit"]
    total_pages = (total_movies + page_size - 1) // page_size

    start = (page - 1) * page_size
    end = start + page_size
    movie = movies[start:end][0]

    def get_keyboard():
        kb = InlineKeyboardBuilder()
        if page > 1:
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}")
        if page < total_pages:
            kb.button(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{page + 1}")
        return kb.as_markup()
# +++++++++++++++++++++++++++

# === –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞ ===
'''@router.message(SearchState.waiting_for_title)
async def handle_movie_search(message: types.Message, state: FSMContext):
    title = message.text.strip()
    results = search_by_name(title)

    if results.empty:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for _, row in results.iterrows():
            text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
                   f"–ñ–∞–Ω—Ä—ã: {row['genres']}\n" \
                   f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
            await message.answer(text)

            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = recommend_by_title(row['title'])
            if not recommendations is None:
                await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
                for _, rec in recommendations.iterrows():
                    await message.answer(f"üëâ {rec['title']} ‚Äî {rec['genres']}")

    await state.clear()


# === –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç—ë—Ä—É ===
@router.message(SearchState.waiting_for_actor)
async def handle_actor_search(message: types.Message, state: FSMContext):
    actor = message.text.strip()
    results = search_by_actor(actor)

    if results.empty:
        await message.answer("–§–∏–ª—å–º—ã —Å —ç—Ç–∏–º –∞–∫—Ç—ë—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for _, row in results.iterrows():
            text = f"üé¨ <b>{row['title']}</b> ({row['year']})\n" \
                   f"–ê–∫—Ç—ë—Ä—ã: {row['actors']}\n" \
                   f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {row['rating']}"
            await message.answer(text)

    await state.clear()'''